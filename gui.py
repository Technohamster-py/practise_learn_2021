# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import main as conv

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        # Создание окна приложения
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 500)  # Задание размеров окна
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        """
        Запрет на изменение размеров окна
        """
        MainWindow.setMinimumSize(QtCore.QSize(400, 500))
        MainWindow.setMaximumSize(QtCore.QSize(400, 500))
        MainWindow.setStyleSheet("background-color: rgb(86, 86, 86);")

        # Создание главного виджета
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(129, 129, 129);")
        self.centralwidget.setObjectName("centralwidget")

        # Создание хедера
        self.header = QtWidgets.QLabel(self.centralwidget)
        self.header.setGeometry(QtCore.QRect(0, 0, 400, 71))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.header.setFont(font)
        self.header.setStyleSheet("color: white")
        self.header.setScaledContents(False)
        self.header.setAlignment(QtCore.Qt.AlignCenter)
        self.header.setObjectName("header")

        # Создание кнопки конвертирование
        self.convert_btn = QtWidgets.QPushButton(self.centralwidget)
        self.convert_btn.setGeometry(QtCore.QRect(130, 430, 120, 60))
        self.convert_btn.setStyleSheet("border-color: white;\n"
                                       "color: rgb(255, 255, 255);\n"
                                       "background-color: rgb(118, 118, 118);")
        self.convert_btn.setFlat(False)
        self.convert_btn.setObjectName("convert_btn")

        # Создание разделительной линии
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 380, 411, 71))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        # создание кнопки обновления баз
        self.update_btn = QtWidgets.QPushButton(self.centralwidget)
        self.update_btn.setGeometry(QtCore.QRect(20, 90, 111, 31))
        self.update_btn.setStyleSheet("border-color: white;\n"
                                      "color: rgb(255, 255, 255);\n"
                                      "background-color: rgb(118, 118, 118);")
        self.update_btn.setObjectName("update_btn")

        # Разметка заголовка списка исхондной валюты
        self.source_lbl = QtWidgets.QLabel(self.centralwidget)
        self.source_lbl.setGeometry(QtCore.QRect(30, 150, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.source_lbl.setFont(font)
        self.source_lbl.setStyleSheet("color: rgb(255, 255, 255)")
        self.source_lbl.setObjectName("source_lbl")

        # Разметка заголовка списка требуемой валюты
        self.required_lbl = QtWidgets.QLabel(self.centralwidget)
        self.required_lbl.setGeometry(QtCore.QRect(30, 280, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.required_lbl.setFont(font)
        self.required_lbl.setStyleSheet("color: rgb(255, 255, 255);")
        self.required_lbl.setObjectName("required_lbl")

        # Разметка поля результата
        self.result_lbl = QtWidgets.QLabel(self.centralwidget)
        self.result_lbl.setGeometry(QtCore.QRect(20, 330, 351, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.result_lbl.setFont(font)
        self.result_lbl.setStyleSheet("color: rgb(255, 255, 255);\n"
                                      "background-color: rgb(63, 63, 63);")
        self.result_lbl.setText("")
        self.result_lbl.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.result_lbl.setObjectName("result_lbl")

        # Создание поля ввода суммы конвертации
        self.summ_inp = QtWidgets.QLineEdit(self.centralwidget)
        self.summ_inp.setGeometry(QtCore.QRect(22, 199, 351, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.summ_inp.setFont(font)
        self.summ_inp.setStyleSheet("color: rgb(255, 255, 255);\n"
                                    "background-color: rgb(63, 63, 63);")
        self.summ_inp.setInputMask("")
        self.summ_inp.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.summ_inp.setObjectName("summ_inp")

        # Создание выпадающего списка требуемой валюты
        self.required_list = QtWidgets.QComboBox(self.centralwidget)
        self.required_list.setGeometry(QtCore.QRect(188, 281, 181, 41))
        self.required_list.setStyleSheet("color: rgb(255, 255, 255);")
        self.required_list.setObjectName("required_list")

        # Создание выпадающего списка исходной валюты
        self.source_list = QtWidgets.QComboBox(self.centralwidget)
        self.source_list.setGeometry(QtCore.QRect(190, 150, 181, 41))
        self.source_list.setStyleSheet("color: rgb(255, 255, 255);")
        self.source_list.setObjectName("source_list")

        # Добавление элементов на окно
        self.header.raise_()
        self.line.raise_()
        self.convert_btn.raise_()
        self.update_btn.raise_()
        self.source_lbl.raise_()
        self.required_lbl.raise_()
        self.result_lbl.raise_()
        self.summ_inp.raise_()
        self.required_list.raise_()
        self.source_list.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.update()
        self.add_combo_items()
        self.add_handlers()

    def add_handlers(self):
        """
        Добавление обработчиков кнопкам
        :return:
        """
        self.update_btn.clicked.connect(self.update)
        self.convert_btn.clicked.connect(self.convert)

    def update(self):
        """
            Получение курсов валют с сайта ЦБ РФ
            :return: словарь с курсами единицы валюты по отношению к рублю,
            словарь с наименованиями валют и их буквенными кодами.
            """
        self.courses = {'Российский рубль': 1}
        self.courses, names = conv.get_updates()

        conv.add_data(self.courses, names)

    def convert(self):
        """
        Конвертация валюты
        :return:
        """
        source_currency = self.source_list.currentText()  # Исходная валюта
        required_currency = self.required_list.currentText()  # Требуемая валюта
        new_summ = conv.convert(self.courses, source_currency, required_currency, int(self.summ_inp.text()))
        self.result_lbl.setText(str(new_summ))

    def retranslateUi(self, MainWindow):
        """
        Нанесение надписей на элементы приложения
        :param MainWindow:
        :return:
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Teсhnohamster\'s currency calc"))
        self.header.setText(_translate("MainWindow", "Конвертер валюты"))
        self.convert_btn.setText(_translate("MainWindow", "Конвертировать"))
        self.update_btn.setText(_translate("MainWindow", "Обновить данные"))
        self.source_lbl.setText(_translate("MainWindow", "Исходная валюта"))
        self.required_lbl.setText(_translate("MainWindow", "Требуемая валюта"))
        self.summ_inp.setPlaceholderText(_translate("MainWindow", "Сумма"))

    def add_combo_items(self):
        """
        Добавление доступных валют в выпадающие списки
        :return:
        """
        for currency in self.courses.keys():
            self.source_list.addItem(currency)
            self.required_list.addItem(currency)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
